centroids<-data[sample.int(nrow(data),K),]
current_stop_crit=1000
cluster=rep(0,nrow(data))
converged=F
it=1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
break()
it<-1
it=1
kmeans<-function(data,K=4,stop_crit=10e-5)
{
#Initialisation of clusters
centroids<-data[sample.int(nrow(data),K),]
current_stop_crit<-1000
cluster<-rep(0,nrow(data))
converged<-F
it=1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
View(kmeans)
View(kmeans)
View(kmeans)
res<-kmeans(DF[1:2],K=5)
DF<-data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
set5<-mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF=data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
set1 <- mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
#Initialisation of clusters
centroids<-data[sample.int(nrow(data),K),]
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
set5 = mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
set1 = MASS::mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
require(MASS)
require(ggplot2)
set.seed(1234)
set1 = MASS::mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 300, c(5,7), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 300, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
source('~/Documents/R programs/clustering.R')
require(MASS)
require(MASS)
require(ggplot2)
set.seed(1234)
set1 = MASS::mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 300, c(5,7), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 300, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
kmeans = function(data,K=4,stop_crit=10e-5)
{
#Initialisation of clusters
centroids = data[sample.int(nrow(data),K),]
current_stop_crit = 1000
cluster = rep(0,nrow(data))
converged = F
it = 1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
res<-kmeans(DF[1:2],K=5)
res$centroids$cluster=1:5
res$data$isCentroid=F
res$centroids$isCentroid=T
data_plot=rbind(res$centroids,res$data)
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
require(MASS)
require(ggplot2)
set.seed(42)
set1 = MASS::mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 300, c(5,7), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 300, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
kmeans = function(data,K=4,stop_crit=10e-5)
{
#Initialisation of clusters
centroids = data[sample.int(nrow(data),K),]
current_stop_crit = 1000
cluster = rep(0,nrow(data))
converged = F
it = 1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
res<-kmeans(DF[1:2],K=5)
res$centroids$cluster=1:5
res$data$isCentroid=F
res$centroids$isCentroid=T
data_plot=rbind(res$centroids,res$data)
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
require(MASS)
clearPushBack()
require(MASS)
require(ggplot2)
set.seed(42)
set1 = MASS::mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 300, c(5,7), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 300, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
kmeans = function(data,K=4,stop_crit=10e-3)
{
#Initialisation of clusters
centroids = data[sample.int(nrow(data),K),]
current_stop_crit = 1000
cluster = rep(0,nrow(data))
converged = F
it = 1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
res<-kmeans(DF[1:2],K=5)
res$centroids$cluster=1:5
require(MASS)
require(ggplot2)
set.seed(42)
set1 = MASS::mvrnorm(n = 300, c(-4,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 300, c(5,7), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 300, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 300, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 300, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=300))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
kmeans = function(data,K=4,stop_crit=10e-3)
{
#Initialisation of clusters
centroids = data[sample.int(nrow(data),K),]
current_stop_crit = 1000
cluster = rep(0,nrow(data))
converged = F
it = 1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
res<-kmeans(DF[1:2],K=5)
res$centroids$cluster=1:5
res$data$isCentroid=F
res$centroids$isCentroid=T
data_plot=rbind(res$centroids,res$data)
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
##Building three sets
set1=data.frame(r=runif(300,0.1,0.5),theta=runif(300,0,360),set='1')
set2=data.frame(r=runif(300,1,1.5),theta=runif(300,0,360),set='2')
set3=data.frame(r=runif(300,3,5),theta=runif(300,0,360),set='3')
##Transformation in rings
data_2=rbind(set1,set2,set3)
data_2$x=data_2$r*cos(2*3.14*data_2$theta)
data_2$y=(data_2$r)*sin(2*3.14*data_2$theta)
res2 = kmeans(data_2[1:2], K=5)
res2$centroids$cluster=1:5
res2$data$isCentroid=F
res2$centroids$isCentroid=T
data_plot=rbind(res2$centroids,res2$data)
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
##Building three sets
set1=data.frame(r=runif(300,0.1,0.5),theta=runif(300,0,360),set='1')
set2=data.frame(r=runif(300,1,1.5),theta=runif(300,0,360),set='2')
set3=data.frame(r=runif(300,3,5),theta=runif(300,0,360),set='3')
##Transformation in rings
data_2=rbind(set1,set2,set3)
data_2$x=data_2$r*cos(2*3.14*data_2$theta)
data_2$y=(data_2$r)*sin(2*3.14*data_2$theta)
ggplot(data_2,aes(x=X1,y=X2,color=cluster))+geom_point()
require(MASS)
require(MASS)
require(ggplot2)
set.seed(42)
set1 = MASS::mvrnorm(n = 150, c(-10,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 150, c(5,10), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 150, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 150, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 150, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=150))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
require(MASS)
require(ggplot2)
set.seed(42)
set1 = MASS::mvrnorm(n = 150, c(-10,10), matrix(c(1.5,1,1,1.5),2))
set2 = MASS::mvrnorm(n = 150, c(-5,10), matrix(c(1,2,2,6),2))
set3 = MASS::mvrnorm(n = 150, c(-1,1), matrix(c(4,0,0,4),2))
set4 = MASS::mvrnorm(n = 150, c(10,-10), matrix(c(4,0,0,4),2))
set5 = MASS::mvrnorm(n = 150, c(3,-3), matrix(c(4,0,0,4),2))
DF = data.frame(rbind(set1,set2,set3,set4,set5),cluster=as.factor(c(rep(1:5,each=150))))
ggplot(DF,aes(x=X1,y=X2,color=cluster))+geom_point()
kmeans = function(data,K=4,stop_crit=10e-3)
{
#Initialisation of clusters
centroids = data[sample.int(nrow(data),K),]
current_stop_crit = 1000
cluster = rep(0,nrow(data))
converged = F
it = 1
while(current_stop_crit>=stop_crit & converged==F)
{
it=it+1
if (current_stop_crit<=stop_crit)
{
converged=T
}
old_centroids=centroids
##Assigning each point to a centroid
for (i in 1:nrow(data))
{
min_dist=10e10
for (centroid in 1:nrow(centroids))
{
distance_to_centroid=sum((centroids[centroid,]-data[i,])^2)
if (distance_to_centroid<=min_dist)
{
cluster[i]=centroid
min_dist=distance_to_centroid
}
}
}
##Assigning each point to a centroid
for (i in 1:nrow(centroids))
{
centroids[i,]=apply(data[cluster==i,],2,mean)
}
current_stop_crit=mean((old_centroids-centroids)^2)
}
return(list(data=data.frame(data,cluster),centroids=centroids))
}
res<-kmeans(DF[1:2],K=5)
res$centroids$cluster=1:5
res$data$isCentroid=F
res$centroids$isCentroid=T
data_plot=rbind(res$centroids,res$data)
ggplot(data_plot,aes(x=X1,y=X2,color=as.factor(cluster),size=isCentroid,alpha=isCentroid))+geom_point()
install.packages(c("dplyr", "SnowballC", "tidytext", "tm", "twitteR"))
library(twitteR)
library(tidytext)
library(twitteR)
library(tidytext)
library(dplyr)
library(tm)
library(SnowballC)
workingDir <- "~/Documents/R programs"
setwd(workingDir)
install.packages("twitteR")
install.packages(c("curl", "openssl", "hhtr"))
install.packages(c("curl", "openssl", "httr"))
install.packages("twitteR")
install.packages("curl")
install.packages("curl")
install.packages("twitteR")
library(twitteR)
library(tidytext)
library(dplyr)
library(tm)
library(SnowballC)
install.packages("tm")
install.packages("xml2")
install.packages("tm")
library(twitteR)
library(tidytext)
library(dplyr)
library(tm)
library(SnowballC)
workingDir <- "~/Documents/R programs"
setwd(workingDir)
url <- "http://www.rdatamining.com/data/rdmTweets-201306.RData"
download.file(url, destfile = "rdmTweets-201306.RData")
load(file = "rdmTweets-201306.RData")
tweets <- twListToDF(tweets)
load(file = "rdmTweets-201306.RData")
tweets <- twListToDF(tweets)
tweets <- tweets %>%
mutate(text=gsub("(http|https).+$|\\n|&amp|[[:punct:]]","",text),
rowIndex=as.numeric(row.names(.))) %>%
select(text,retweetCount,rowIndex)
docList <- as.list(tweets$text)
N.docs <- length(docList)
QrySearch <- function(queryTerm) {
# Record starting time to measure your search engine performance
start.time <- Sys.time()
# store docs in Corpus class which is a fundamental data structure in text mining
my.docs <- VectorSource(c(docList, queryTerm))
# Transform/standaridze docs to get ready for analysis
my.corpus <- VCorpus(my.docs) %>%
tm_map(stemDocument) %>%
tm_map(removeNumbers) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords,stopwords("en")) %>%
tm_map(stripWhitespace)
# Store docs into a term document matrix where rows=terms and cols=docs
# Normalize term counts by applying TDiDF weightings
term.doc.matrix.stm <- TermDocumentMatrix(my.corpus,
control=list(
weighting=function(x) weightSMART(x,spec="ltc"),
wordLengths=c(1,Inf)))
# Transform term document matrix into a dataframe
term.doc.matrix <- tidy(term.doc.matrix.stm) %>%
group_by(document) %>%
mutate(vtrLen=sqrt(sum(count^2))) %>%
mutate(count=count/vtrLen) %>%
ungroup() %>%
select(term:count)
docMatrix <- term.doc.matrix %>%
mutate(document=as.numeric(document)) %>%
filter(document<N.docs+1)
qryMatrix <- term.doc.matrix %>%
mutate(document=as.numeric(document)) %>%
filter(document>=N.docs+1)
# Calcualte top ten results by cosine similarity
searchRes <- docMatrix %>%
inner_join(qryMatrix,by=c("term"="term"),
suffix=c(".doc",".query")) %>%
mutate(termScore=round(count.doc*count.query,4)) %>%
group_by(document.query,document.doc) %>%
summarise(Score=sum(termScore)) %>%
filter(row_number(desc(Score))<=10) %>%
arrange(desc(Score)) %>%
left_join(tweets,by=c("document.doc"="rowIndex")) %>%
ungroup() %>%
rename(Result=text) %>%
select(Result,Score,retweetCount) %>%
data.frame()
# Record when it stops and take the difference
end.time <- Sys.time()
time.taken <- round(end.time - start.time,4)
print(paste("Used",time.taken,"seconds"))
return(searchRes)
}
QrySearch("data science")
